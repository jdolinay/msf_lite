REMEM: shrnuti informaci o Kinetis a ARM prostredi a CMSIS atd:
--------------------------------
Dosel jsem k zaveru, ze pro poskytnuti ukazkovych programu v MSF je vhodnejsi CW
nez Eclipse, protoze CW staci nainstalovat a jede, zatimco eclipse vyzaduje slozitou
konfiguraci a instalaci pluginu a toolchains, viz nize.
Taky debug neni snadny, vyzaduje SEGGER OpneSDA aplikaci emulujici J-link, ktera ma
licencni omezeni, viz nize.  
Cilem build-examplu v MSF je poskytnout startovaci funkcni program co nejsnadneji, 
ten si muze uzivatel prenest do vlastniho IDE, pokud chce.

Startup kod jsem zkousel 3 varianty:
a) samozny kod v asm (.s soubor) poskytnuty v Sample code package (SCP) pro FRDM-KL25Z
 > nefunguje, po nahrani konci na adrese ffffffff, taky je dost divny
b) ruzne upravy startup kodu podle sample code package, resp. kombinovani kodu
 generovaneho defaultne v CW s kodem ze sample code package
> nepodarilo se zprovoznit a je taky zbycesne.
> Kod dle SCP je zbytecne slozity. Pro #ifdef CMSIS vola z main() funkci setup()
kterou jinak vola startup kod... 
c) normalni kod generovany CW wizardem, jen doplneny o volani SystemInit pred 
volanim main().
 > toto je Ok. Inspiraci byl kod generovany wizardem v Eclipse pro FRDM desku, 
 ktery taky vyuziva CMSIS soubory a resi to takto. Jinak je dost podobny kodu
 genertovanemu CW, tj. vse je v C, ne v asm (.s). 
 > tento eclipse kod je podle me spravny, napevno v sobe integruje CMSIS s jeho 
 inicializaci clock. Stadardni CW kod clock neresi a SCP kod ho resi po svem a nebo
 volitelne pres CMSIS = moc slozite.        
 
Pro debug FRDMKL25Z je mozno pouzivat OpenSDA original aplikaci, ktera funguje 
v CW a nebo od SEGGER stahnout jejich OpenSDA aplikaci, ktera funguje jako J-link
a funguje v eclipse (podporuje standardni GDBG). 

END REMEM

1) Zprovoznen build pro FRDM (kl25Z) v eclipse Kepler. Funguje i debug ale openSDA
aplikace segger,ktera se pouziva (emuluje j-link, pro ktery je eclipse plugin)
je licencne urcena jen pro pouziti s eval boards, ne pro vlastni design...
 > neni to opravdu "free" reseni.
 Postup zhruba (podle navodu k pluginu):
 Install AVR pluginu pro eclipse (ilg.gnuarmeclipse.repository-2.2.2-201404240550.zip)
 Install ARM GCC toolchain (gcc-arm-none-eabi-4_8-2014q1-20140314-win32.exe)
 Install utilit (make,..) (Cross Build Tools.zip)
 Ted je mozno build; pri vytvareni projektu pri dotazu na toolchain nutno zadat
 cestu do \bin, nejen do korene ARM toolchain.
 Pro debug:
 Install Segger J-link aplikace (Setup_JLinkARM_V484e.exe)
 Do frdm desky nahrat OpenSDA aplikace od segger, ktera emuluje J-link.
 Nastaveni debug configuration pro GDB SEGGER J-link debugging.
 Funguje pak i debug ok :)
 
 Zaver:
 ------
 Mam sice funkci Eclipse reseni pro FRDM platformu, ale jako ukazkovy projekt
 pro MSF asi lepsi freescale CW, protoze konfigurace Eclipse je slozita, uzivatel
 se spis smiri s 64 kb limitem programu nez aby toto instaloval... :) 
 
 2) Zprovoznen program s CMSIS v CW10.5 s inspiraci od blink led generovaneho
 wizardem v Eclipse s ARM pluginem.
 Jak?
 startup ponechan original CW, jen do __thumb_startup() pred volani main() pridano
 volani funkce CMSIS SystemInit(). 
   