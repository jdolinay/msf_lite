Howto create projects for MSF lite in CodeWarrior 10.x IDE

Note:
The MSF lite projects in CW 10.5 for the FRDM-KL25Z board use the universal ARM-defined CMSIS (register definitions and init functions) rather than the Freescale-specific EWL definitions generated by the CW wizard.

----------------------------------------------------------
Setup using exported project settings and template files
----------------------------------------------------------
1) Create normal bareboard project in CW 10.5 for MKL25Z128 
 
 - In Connections select Open SDA
 - If you plan to experiment with eclipse, add also Segger J-link connection
 - In I/O Support select: No I/O

2) Add these folders and files to the project (as links!):
Use Import ... File System ... Select the imported folder (checkbox will 
select all the files). 
 AND in Advanced select Link resources (do not copy the files to your workspace)
 AND check the "Create top folder" so that the CMSIS folder is also created in your project
 
To add:
- msf_lite\vendor\freescale\CMSIS
- msf_lite\common
- msf_lite\platform\kinetis
- msf_lite\board\frdm_kl25z

3) Delete the file Project_Headers\MKL25Z4.H (the header for the MCU provided by CW); 
we will  use CMSIS header.

4) Copy the folders 
Project_Headers 
Project_Settings\Startup_Code 
from  msf_lite\templates\cw
into your project replacing the existing files. But do not delete the files which are
already in your projects folder and do not get overwritten.

5) Import project settings from msf_lite\templates\cw\project_settings.xml
(Include paths).

6) Your project should now build OK.

For Arduino- compatibility project:
7) Copy main.c from msf_lite\templates\cw\arduino\sources to your project\sources
overwriting the original main.c file created by New project wizard.


------------------
Full manual setup
------------------
1) Create normal bareboard project in CW 10.5 for MKL25Z128 
 
 - In Connections select Open SDA
 - If you plan to experiment with eclipse, add also Segger J-link connection
 - In I/O Support select: No I/O



2) Add CMSIS files to the project:
  - Import ... File System ... Select the CMSIS folder (checkbox will 
select all the files). Located in msf_lite\vendor\freescale\CMSIS.
 AND in Advanced select Link resources (do not copy the files to your workspace)
 AND check the "Create top folder" so that the CMSIS folder is also created in your project.

2.1) In the same way add the MSF files (msf_lite\platform\kinetis) and board specific
files (msf_lite\board\frdm_kl25z\) 
 

3) Delete the file Project_Headers\MKL25Z4.H (the header for the MCU provided by CW); we will  use CMSIS header.

4) Add these paths to Options > C/C++ Build > Settings > ARM C compiler... > Directories:
"${ProjDirPath}\..\..\..\..\vendor\freescale\CMSIS"
"${ProjDirPath}\..\..\..\..\vendor\freescale\CMSIS\MKL25Z4/Include"
"${ProjDirPath}\..\..\..\..\vendor\freescale\CMSIS\Include"


4) Add CMSIS SystemInit call to the CW startup routine __thumb_startup in Project_Settings\Startup_Code\__arm_start.c
Note: The CW startup code by default does not initialize CPU clock, but the CMSIS SystemInit does this.

5) In Project_Settings\Startup_Code\__arm_start.c in the function __init_hardware()
replace:
SCB_VTOR = (uint32_t)__vector_table; /* Set the interrupt vector table position */	
SIM_COPC = KINETIS_WDOG_DISABLED_CTRL;
with:
SCB->VTOR = (uint32_t)__vector_table;
SIM->COPC = KINETIS_WDOG_DISABLED_CTRL;
(Use CMSIS standard access to registers inctead of CW EWL macros)

6) Your project should now build without error.

7) In the main file replace the #include "derivative.h" with:
/* MSF configuration for this project */
#include "msf_config.h"
/* Include the core definitions - CMSIS <device>.h file etc.*/
#include "coredef.h"
#include "msf.h"

8) Add these paths to Options > C/C++ Build > Settings > ARM C compiler... > Directories:
"${ProjDirPath}\..\..\..\..\common"
"${ProjDirPath}\..\..\..\..\platform\kinetis"
"${ProjDirPath}\..\..\..\..\platform\kinetis\mkl25z" 
"${ProjDirPath}\..\..\..\..\board\frdm_kl25z"

9) Copy msf_config.h file from [MSF lite]\template\ to your project\Project__Headers
and edit the option(s) as suited for your application.

10) Create MSF folder in your project (in CW)

11) Select this folder and import all files (LINK them!) from these locations:
(use Create links, Create virtual folders and Create top level folder import options)
[MSF lite]\common
[MSF lite]\platform\kinetis

12) Start debugging, use the OpenSDA connection.



Configuration files
---------------------
*) Your application includes msf_config.h. You should create this file locally in
each project by "clonning" the file provided in [MSF lite]\template\.

*) msf_config.h defines some options which are application-specific (CPU frequency)
and includes the main header file for the BOARD used in the application, e.g.
#include "frdm_kl25z.h"  (<board>.h file) 

*) The <board>.h file includes main configuration file for the MCU used in the board, e.g.
#include "msf_config_mkl25z.h" (msf_config_<device>.h 
This is internal file which you do not need to edit in most cases!
You can do so with care, however; it is no magic.
The <board>.h file also defines the constants for the board, e.g. pin names.

General advice: edit options msf_config.h as needed; do not edit the other files
included from this file unless you understand what you are doing.



